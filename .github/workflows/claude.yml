name: Claude Code Assistant

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  claude-assistant:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    # Cancel older runs when a new commit arrives on the same PR
    concurrency:
      group: pr-${{ github.event.pull_request.number }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Security Check - Validate User Access
        run: |
          ACTOR="${{ github.actor }}"
          echo "Validating access for user: $ACTOR"
          
          # Check if user is organization member
          MEMBERSHIP_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/orgs/deriv-com/members/$ACTOR" \
            -w "%{http_code}" -o /dev/null)
          
          if [[ "$MEMBERSHIP_STATUS" == "204" ]]; then
            echo "✅ User $ACTOR is a verified organization member"
            exit 0
          fi
          
          # Check if user is repository collaborator
          COLLABORATOR_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/collaborators/$ACTOR" \
            -w "%{http_code}" -o /dev/null)
          
          if [[ "$COLLABORATOR_STATUS" == "204" ]]; then
            echo "✅ User $ACTOR is a verified repository collaborator"
            exit 0
          fi
          
          echo "❌ Access denied for user: $ACTOR"
          echo "Only organization members and repository collaborators can trigger Claude actions."
          exit 1

      - name: Get PR details
        id: pr
        run: |
          # Get PR URL based on event type
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_URL="${{ github.event.issue.pull_request.url }}"
          elif [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
            PR_URL="${{ github.event.pull_request.url }}"
          elif [ "${{ github.event_name }}" = "pull_request_review" ]; then
            PR_URL="${{ github.event.pull_request.url }}"
          fi
          
          echo "Getting PR data from: $PR_URL"
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$PR_URL")
          
          # Extract fork repository and branch
          FORK_REPO=$(echo "$PR_DATA" | jq -r '.head.repo.full_name')
          BRANCH_NAME=$(echo "$PR_DATA" | jq -r '.head.ref')
          
          echo "fork_repo=$FORK_REPO" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          echo "PR is from: $FORK_REPO:$BRANCH_NAME"

      - name: Run Claude Code Action
        uses: anthropics/claude-code-action@v1
        timeout-minutes: 60
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          track_progress: true
          prompt: |
              REPO: ${{ github.repository }}
              PR NUMBER: ${{ github.event.pull_request.number }}

              Please review this pull request with a focus on:
              - Correctness, regressions, and edge cases
              - Code quality & readability (React + TypeScript best practices)
              - Performance (render cost, memoization, effects)
              - Security (XSS, auth flows, secrets)
              - Tests (coverage for new logic)

              Output:
              - Inline comments for specific issues
              - A summary comment with high/medium/low priority items
              - Concrete fix suggestions and quick patches where safe