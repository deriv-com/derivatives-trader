name: AI Metrics Dashboard

on:
  # Allow calling from other repositories
  workflow_call:
  
  # Run weekly on Sundays at 6 AM UTC
  schedule:
    - cron: '0 6 * * 0'
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Run when AI history tracker workflow completes
  workflow_run:
    workflows: ["AI Analysis History Tracker"]
    types:
      - completed

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-dashboard:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.4
        with:
          node-version: '18'

      - name: Prepare scripts directory
        run: |
          mkdir -p .github/scripts
          
      - name: Copy dashboard generation script
        run: |
          # If the script doesn't exist locally, copy from the workflow repo
          if [ ! -f ".github/scripts/generate-dashboard.js" ]; then
            echo "Copying dashboard script from workflow repository..."
            # Try to determine the source repository (could be customized)
            WORKFLOW_REPO="${{ github.repository }}"
            if [[ "$WORKFLOW_REPO" != *"shift-ai"* ]]; then
              # This is a consumer repo, find the source
              WORKFLOW_REPO="${{ github.repository_owner }}/shift-ai"
            fi
            curl -sL "https://raw.githubusercontent.com/${WORKFLOW_REPO}/main/.github/scripts/generate-dashboard.js" > .github/scripts/generate-dashboard.js
            chmod +x .github/scripts/generate-dashboard.js
          fi

      - name: Generate AI Analysis Dashboard
        run: |
          node .github/scripts/generate-dashboard.js

      - name: Create/Update Dashboard PR
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if dashboard file was created and has content
          if [ -f "AI-DASHBOARD.md" ] && [ -s "AI-DASHBOARD.md" ]; then
            
            # Define branch name first (before any potential exits)
            BRANCH_NAME="dashboard-update-$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "🔧 Set BRANCH_NAME=$BRANCH_NAME"
          
          # Check if there are any changes
          git add AI-DASHBOARD.md
          if git diff --staged --quiet; then
            echo "ℹ️  No changes to dashboard"
            exit 0
          fi
          
          # Always create a new unique branch to avoid SHA conflicts
          echo "🌿 Creating new unique branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          
          # Add and commit changes
          git add AI-DASHBOARD.md
          git commit -m "📊 Update AI Code Analysis Dashboard

          - Updated: $(date -u +"%Y-%m-%d %H:%M UTC")
          - Workflow: ${{ github.workflow }}
          - Trigger: ${{ github.event_name }}
          - Automated dashboard update with latest merged PR data"
          
          # Push to remote
          git push origin "$BRANCH_NAME"
          
          echo "✅ Dashboard changes pushed to branch: $BRANCH_NAME"
          
        else
          echo "❌ Dashboard file not generated or empty"
          exit 1
        fi

      - name: Create or Update Pull Request
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            const { owner, repo } = context.repo;
            
            console.log('🔍 Environment check:');
            console.log('  BRANCH_NAME:', branchName);
            console.log('  owner:', owner);
            console.log('  repo:', repo);
            
            if (!branchName || branchName.trim() === '') {
              throw new Error('BRANCH_NAME environment variable is not set or empty! Cannot create PR without head branch.');
            }
            
            // First, check if there's already an "AI Dashboard Update" PR
            try {
              const { data: allOpenPRs } = await github.rest.pulls.list({
                owner,
                repo,
                state: 'open'
              });
              
              const existingDashboardPR = allOpenPRs.find(pr => 
                pr.title === 'AI Dashboard Update'
              );
              
              if (existingDashboardPR) {
                // Update the existing PR to point to the new branch
                await github.rest.pulls.update({
                  owner,
                  repo,
                  pull_number: existingDashboardPR.number,
                  head: branchName,
                  body: '## 📊 AI Code Analysis Dashboard Update\n\n🤖 This is an automated update to the AI Code Analysis Dashboard with the latest merged PR data.\n\n### 📈 What\'s Updated:\n- Latest AI analysis statistics from merged PRs\n- Updated charts and visualizations\n- Historical data trends\n\n### 🔄 Auto-Update Details:\n- **Trigger**: ' + context.eventName + '\n- **Workflow**: ' + context.workflow + '\n- **Updated**: ' + new Date().toISOString() + '\n\n### 🎯 Next Steps:\n- Review the updated dashboard content\n- Merge when ready to publish the latest AI analysis data\n\n---\n*🤖 This PR is automatically maintained by the AI Dashboard workflow and will always contain the latest dashboard updates.*'
                });
                
                console.log('✅ Updated existing PR #' + existingDashboardPR.number + ': ' + existingDashboardPR.html_url);
                
              } else {
                // Create new PR with the standard title
                const { data: newPR } = await github.rest.pulls.create({
                  owner,
                  repo,
                  title: 'AI Dashboard Update',
                  head: branchName,
                  base: 'master',
                  body: '## 📊 AI Code Analysis Dashboard Update\n\n🤖 This is an automated update to the AI Code Analysis Dashboard with the latest merged PR data.\n\n### 📈 What\'s Updated:\n- Latest AI analysis statistics from merged PRs\n- Updated charts and visualizations\n- Historical data trends\n\n### 🔄 Auto-Update Details:\n- **Trigger**: ' + context.eventName + '\n- **Workflow**: ' + context.workflow + '\n- **Updated**: ' + new Date().toISOString() + '\n\n### 🎯 Next Steps:\n- Review the updated dashboard content\n- Merge when ready to publish the latest AI analysis data\n\n---\n*🤖 This PR is automatically maintained by the AI Dashboard workflow and will always contain the latest dashboard updates.*',
                  draft: false
                });
                
                console.log('✅ Created new PR #' + newPR.number + ': ' + newPR.html_url);
              }
              
            } catch (error) {
              console.error('Error managing PR:', error);
              throw error;
            }

      - name: Auto-merge Dashboard PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          SHIFTAI_TOKEN: ${{ secrets.SHIFTAI_TOKEN }}
        with:
          github-token: ${{ secrets.SHIFTAI_TOKEN }}
          script: |
            const branchName = process.env.BRANCH_NAME;
            const shiftaiToken = process.env.SHIFTAI_TOKEN;
            const { owner, repo } = context.repo;
            
            if (!shiftaiToken) {
              console.log('SHIFTAI_TOKEN not available - skipping auto-merge');
              return;
            }
            
            console.log('SHIFTAI_TOKEN detected - attempting auto-merge...');
            console.log('Auto-merge environment check:');
            console.log('  BRANCH_NAME:', branchName);
            
            if (!branchName || branchName.trim() === '') {
              console.log('ERROR: BRANCH_NAME not set - cannot auto-merge');
              return;
            }
            
            try {
              // Find the dashboard PR by title
              const { data: allOpenPRs } = await github.rest.pulls.list({
                owner,
                repo,
                state: 'open'
              });
              
              const dashboardPR = allOpenPRs.find(pr => pr.title === 'AI Dashboard Update');
              
              if (dashboardPR) {
                // Wait a moment for any checks to start
                await new Promise(resolve => setTimeout(resolve, 5000));
                
                // Auto-merge the PR
                await github.rest.pulls.merge({
                  owner,
                  repo,
                  pull_number: dashboardPR.number,
                  merge_method: 'squash',
                  commit_title: '📊 Auto-merged: AI Dashboard Update',
                  commit_message: 'Automatically merged dashboard update PR via SHIFTAI_TOKEN\n\n🤖 This PR was auto-merged using administrative privileges to maintain dashboard currency.'
                });
                
                console.log('✅ Auto-merged dashboard PR #' + dashboardPR.number);
                console.log('🚀 Dashboard is now live with latest data!');
                
              } else {
                console.log('⚠️  No open "AI Dashboard Update" PR found to auto-merge');
              }
              
            } catch (error) {
              console.error('❌ Auto-merge failed:', error.message);
              console.log('💡 PR will remain open for manual review and merge');
              // Don't throw - let workflow continue
            }

      - name: Output dashboard info
        env:
          SHIFTAI_TOKEN: ${{ secrets.SHIFTAI_TOKEN }}
        run: |
          echo "📊 AI Code Analysis Dashboard updated!"
          echo ""
          echo "🔄 Dashboard update process:"
          echo "   • ✅ Generated updated dashboard"
          echo "   • ✅ Created/updated PR with changes"  
          if [ -n "$SHIFTAI_TOKEN" ]; then
            echo "   • 🤖 Auto-merge attempted (SHIFTAI_TOKEN detected)"
          else
            echo "   • ⏳ Waiting for review and merge"
          fi
          echo ""
          echo "🔗 Once merged, view your dashboard:"
          echo "   • Direct link: https://github.com/${{ github.repository }}/blob/main/AI-DASHBOARD.md"
          echo "   • Mobile friendly: Open AI-DASHBOARD.md in GitHub mobile app"
          echo ""
          echo "✨ The dashboard respects branch protection rules by using PRs!" 