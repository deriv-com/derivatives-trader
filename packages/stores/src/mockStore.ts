import merge from 'lodash.merge';

import type { TCoreStores, TStores } from '../types';

type DeepPartial<T> = T extends object
    ? {
          [P in keyof T]?: DeepPartial<T[P]>;
      }
    : T;

const mock = (): TStores & { is_mock: boolean } => {
    const common_store_error = {
        app_routing_history: [],
        header: '',
        message: '',
        type: '',
        redirect_label: '',
        redirect_to: '',
        should_clear_error_on_click: false,
        should_show_refresh: false,
        redirectOnClick: jest.fn(),
    };
    return {
        is_mock: true,
        client: {
            account_type: 'virtual',
            current_account: null,
            setIsLoggingIn: jest.fn(),
            available_crypto_currencies: [],
            available_onramp_currencies: [],
            balance: '',
            clients_country: '',
            currency: '',
            currencies_list: [{ text: '', value: '', has_tool_tip: false }],
            email_address: '',
            has_any_real_account: false,
            should_redirect_user_to_login: false,
            setShouldRedirectToLogin: jest.fn(),
            has_active_real_account: false,
            has_cookie_account: false,
            has_logged_out: false,
            initialized_broadcast: false,
            is_authorize: false,
            is_eu_country: false,
            is_eu: false,
            is_logged_in: false,
            is_logging_in: false,
            is_client_store_initialized: false,
            is_virtual: false,
            landing_company_shortcode: '',
            loginid: '',
            residence: '',
            email: '',
            is_cr_account: false,
            is_mf_account: false,
            is_options_blocked: false,
            is_multipliers_only: false,
            is_single_currency: false,
            default_currency: 'USD',
            setInitialized: jest.fn(),
            setIsClientStoreInitialized: jest.fn(),
            setLogout: jest.fn(),
            selectCurrency: jest.fn(),
            setLoginId: jest.fn(),
            setIsAuthorize: jest.fn(),
            setBalanceActiveAccount: jest.fn(),
            setEmail: jest.fn(),
            resetVirtualBalance: jest.fn(),
            logout: jest.fn(),
            getToken: jest.fn(),
            authenticateV2: jest.fn(),
            storeSessionToken: jest.fn(),
            getSessionToken: jest.fn(),
            clearSessionToken: jest.fn(),
            removeTokenFromUrl: jest.fn(),
            is_crypto: jest.fn(),
            responseAuthorize: jest.fn(),
            responsePayoutCurrencies: jest.fn(),
            init: jest.fn(),
        },
        common: {
            error: common_store_error,
            current_language: 'EN',
            isCurrentLanguage: jest.fn(),
            is_socket_opened: false,
            has_error: false,
            routeBackInApp: jest.fn(),
            routeTo: jest.fn(),
            changeCurrentLanguage: jest.fn(),
            changeSelectedLanguage: jest.fn(),
            resetServicesError: jest.fn(),
            is_network_online: false,
            network_status: {},
            services_error: {},
            server_time: new Date() as unknown as TCoreStores['common']['server_time'],
            setError: jest.fn(),
            setSelectedContractType: jest.fn(),
            setServicesError: jest.fn(),
            showError: jest.fn(),
            is_language_changing: false,
            setAppstorePlatform: jest.fn(),
            app_routing_history: [],
            getExchangeRate: jest.fn(),
        },
        ui: {
            advanced_duration_unit: 't',
            advanced_expiry_type: 'duration',
            app_contents_scroll_ref: {
                current: null,
            },
            current_focus: null,
            duration_t: 5,
            getDurationFromUnit: jest.fn(),
            is_advanced_duration: false,
            is_history_tab_active: false,
            is_loading: false,
            is_redirected_from_email: false,
            is_chart_layout_default: false,
            is_chart_countdown_visible: false,
            is_closing_create_real_account_modal: false,
            is_forced_to_exit_pnv: false,
            is_phone_verification_completed: false,
            is_dark_mode_on: false,
            is_from_signup_account: false,
            is_language_settings_modal_on: false,
            is_desktop: false,
            is_app_disabled: false,
            header_extension: null,
            is_link_expired_modal_visible: false,
            is_mobile: false,
            is_tablet: false,
            is_mobile_language_menu_open: false,
            is_positions_drawer_on: false,
            is_reports_visible: false,
            is_verification_submitted: false,
            is_reset_email_modal_visible: false,
            is_reset_password_modal_visible: false,
            is_route_modal_on: false,
            is_services_error_visible: false,
            should_show_phone_number_otp: false,
            is_trading_assessment_for_existing_user_enabled: false,
            setIsForcedToExitPnv: jest.fn(),
            setIsPhoneVerificationCompleted: jest.fn(),
            setRedirectFromEmail: jest.fn(),
            setShouldShowPhoneNumberOTP: jest.fn(),
            disableApp: jest.fn(),
            enableApp: jest.fn(),
            setCurrentFocus: jest.fn(),
            toggleCashier: jest.fn(),
            setDarkMode: jest.fn(),
            setReportsTabIndex: jest.fn(),
            has_real_account_signup_ended: false,
            real_account_signup_target: '',
            real_account_signup: {
                active_modal_index: -1,
                previous_currency: '',
                current_currency: '',
                success_message: '',
                error_message: '',
            },
            resetRealAccountSignupParams: jest.fn(),
            notification_messages_ui: jest.fn(),
            onChangeUiStore: jest.fn(),
            openPositionsDrawer: jest.fn(),
            setChartCountdown: jest.fn(),
            setIsWalletModalVisible: jest.fn(),
            setIsClosingCreateRealAccountModal: jest.fn(),
            setIsFromSignupAccount: jest.fn(),
            setMobileLanguageMenuOpen: jest.fn(),
            setRealAccountSignupEnd: jest.fn(),
            setPromptHandler: jest.fn(),
            setPurchaseState: jest.fn(),
            setAppContentsScrollRef: jest.fn(),
            shouldNavigateAfterChooseCrypto: jest.fn(),
            simple_duration_unit: 't',
            toggleHistoryTab: jest.fn(),
            toggleLanguageSettingsModal: jest.fn(),
            togglePositionsDrawer: jest.fn(),
            toggleResetEmailModal: jest.fn(),
            toggleResetPasswordModal: jest.fn(),
            toggleLinkExpiredModal: jest.fn(),
            toggleServicesErrorModal: jest.fn(),
            addToast: jest.fn(),
            removeToast: jest.fn(),
            resetPurchaseStates: jest.fn(),
            reports_route_tab_index: 1,
            should_show_cancellation_warning: false,
            should_trigger_tour_guide: false,
            toggleCancellationWarning: jest.fn(),
            toggleReports: jest.fn(),
            setSubSectionIndex: jest.fn(),
            sub_section_index: 0,
            is_real_acc_signup_on: false,
            is_need_real_account_for_cashier_modal_visible: false,
            is_verification_modal_visible: false,
            toggleNeedRealAccountForCashierModal: jest.fn(),
            is_switch_to_deriv_account_modal_visible: false,
            openSwitchToRealAccountModal: jest.fn(),
            is_top_up_virtual_open: false,
            is_top_up_virtual_in_progress: false,
            is_top_up_virtual_success: false,
            closeTopUpModal: jest.fn(),
            closeSuccessTopUpModal: jest.fn(),
            openDerivRealAccountNeededModal: jest.fn(),
            populateHeaderExtensions: jest.fn(),
            populateSettingsExtensions: jest.fn(),
            purchase_states: [],
            setIsVerificationModalVisible: jest.fn(),
            setIsVerificationSubmitted: jest.fn(),
            populateFooterExtensions: jest.fn(),
            openAccountNeededModal: jest.fn(),
            openTopUpModal: jest.fn(),
            toggleShouldShowRealAccountsList: jest.fn(),
            is_reset_trading_password_modal_visible: false,
            setResetTradingPasswordModalOpen: jest.fn(),
            vanilla_trade_type: 'VANILLALONGCALL',
            is_additional_kyc_info_modal_open: false,
            isUrlUnavailableModalVisible: false,
            toggleUrlUnavailableModal: jest.fn(),
            field_ref_to_focus: null,
            setFieldRefToFocus: jest.fn(),
            setHashedValue: jest.fn(),
            url_hashed_values: '',
            is_tnc_update_modal_open: false,
            toggleTncUpdateModal: jest.fn(),
        },
        notifications: {
            addNotificationMessage: jest.fn(),
            addNotificationMessageByKey: jest.fn(),
            addTradeNotification: jest.fn(),
            client_notifications: {},
            is_notifications_empty: true,
            is_notifications_visible: false,
            filterNotificationMessages: jest.fn(),
            notifications: [],
            refreshNotifications: jest.fn(),
            removeAllNotificationMessages: jest.fn(),
            removeNotifications: jest.fn(),
            removeNotificationByKey: jest.fn(),
            removeNotificationMessage: jest.fn(),
            removeNotificationMessageByKey: jest.fn(),
            removeTradeNotifications: jest.fn(),
            setShouldShowPopups: jest.fn(),
            toggleNotificationsModal: jest.fn(),
            trade_notifications: [],
        },
        portfolio: {
            active_positions: [],
            active_positions_count: 0,
            all_positions: [],
            barriers: [],
            error: '',
            getPositionById: jest.fn(),
            is_active_empty: false,
            is_loading: false,
            is_accumulator: false,
            is_multiplier: false,
            is_turbos: false,
            onBuyResponse: jest.fn(),
            onHoverPosition: jest.fn(),
            onClickCancel: jest.fn(),
            onClickSell: jest.fn(),
            onMount: jest.fn(),
            onUnmount: jest.fn(),
            open_accu_contract: null,
            positions: [],
            removePositionById: jest.fn(),
            setContractType: jest.fn(),
            setAddNotificationBannerCallback: jest.fn(),
        },
        contract_trade: {
            accu_barriers_timeout_id: null,
            accumulator_barriers_data: {},
            accumulator_contract_barriers_data: {},
            addContract: jest.fn(),
            chart_type: '',
            clearAccumulatorBarriersData: jest.fn(),
            clearError: jest.fn(),
            contracts: [],
            error_message: '',
            filtered_contracts: [],
            getContractById: jest.fn(),
            granularity: 0,
            has_crossed_accu_barriers: false,
            has_error: false,
            last_contract: {},
            markers_array: [],
            onUnmount: jest.fn(),
            prev_chart_type: '',
            prev_contract: {},
            prev_granularity: null,
            removeContract: jest.fn(),
            savePreviousChartMode: jest.fn(),
            setNewAccumulatorBarriersData: jest.fn(),
            updateAccumulatorBarriersData: jest.fn(),
            updateChartType: jest.fn(),
            updateGranularity: jest.fn(),
            updateProposal: jest.fn(),
            previous_accumulator_barriers_data: {},
            is_barriers_loading: false,
            setBarriersLoadingState(is_loading: boolean): void {
                throw new Error('Function not implemented.');
            },
        },
        modules: {
            positions: {
                openContractTypeFilter: [],
                closedContractTypeFilter: [],
                timeFilter: '',
                customTimeRangeFilter: '',
                setClosedContractTypeFilter: jest.fn(),
                setOpenContractTypeFilter: jest.fn(),
                setTimeFilter: jest.fn(),
                setCustomTimeRangeFilter: jest.fn(),
            },
            markets: {
                favoriteIndicators: [],
                favoriteSymbols: [],
                removeFavoriteIndicator: jest.fn(),
                removeFavoriteSymbol: jest.fn(),
                setFavoriteIndicators: jest.fn(),
                setFavoriteSymbols: jest.fn(),
            },
            trade: {
                accumulator_range_list: [],
                active_symbols: [],
                amount: 0,
                barrier_1: '',
                barrier_2: '',
                barrier_choices: [],
                barrier_count: 1,
                barrier_pipsize: 1,
                basis: '',
                basis_list: [],
                cached_multiplier_cancellation_list: [],
                cancellation_duration: '',
                cancellation_range_list: [],
                clearContractPurchaseToastBox: jest.fn(),
                clearPurchaseInfo: jest.fn(),
                clearV2ParamsInitialValues: jest.fn(),
                contract_expiry_type: '',
                contract_purchase_toast_box: {},
                contract_type: '',
                contract_types_list: {},
                contract_types_list_v2: {},
                currency: '',
                duration: 0,
                duration_min_max: {},
                duration_unit: '',
                duration_units_list: [],
                expiry_date: null,
                expiry_epoch: '',
                expiry_time: null,
                expiry_type: '',
                form_components: [],
                growth_rate: 0.01,
                has_cancellation: false,
                has_equals_only: false,
                has_open_accu_contract: false,
                has_stop_loss: false,
                has_take_profit: false,
                is_accumulator: false,
                is_dtrader_v2: false,
                is_equal: 0,
                is_mobile_digit_view_selected: false,
                is_multiplier: false,
                is_purchase_enabled: false,
                is_trade_enabled: true,
                is_trade_enabled_v2: true,
                is_trade_params_expanded: false,
                is_touch: false,
                is_turbos: false,
                is_vanilla: false,
                is_vanilla_fx: false,
                last_digit: 5,
                market_close_times: [],
                market_open_times: [],
                maximum_payout: 0,
                maximum_ticks: 0,
                multiplier: 0,
                multiplier_range_list: [],
                non_available_contract_types_list: {},
                onChange: jest.fn(),
                onChangeMultiple: jest.fn(),
                onHoverPurchase: jest.fn(),
                onPurchase: jest.fn(),
                onPurchaseV2: jest.fn(),
                onMount: jest.fn(),
                onUnmount: jest.fn(),
                previous_symbol: '',
                proposal_info: {},
                purchase_info: {},
                payout_choices: [],
                requestProposal: jest.fn(),
                resetPreviousSymbol: jest.fn(),
                setIsTradeParamsExpanded: jest.fn(),
                setTradeTypeTab: jest.fn(),
                setV2ParamsInitialValues: jest.fn(),
                setPayoutPerPoint: jest.fn(),
                setDefaultStake: jest.fn(),
                stake_boundary: {},
                start_date: 0,
                stop_loss: 0,
                symbol: '',
                take_profit: 0,
                tick_size_barrier_percentage: '',
                ticks_history_stats: {
                    ticks_stayed_in: [],
                    last_tick_epoch: 0,
                },
                trade_type_tab: '',
                trade_types: {},
                validation_errors: {},
                validation_params: {},
                vanilla_trade_type: '',
                v2_params_initial_values: {},
            },
        },
        feature_flags: {
            data: undefined,
            update: jest.fn(),
            unmount: jest.fn(),
            cleanup: jest.fn(),
        },
        gtm: {
            is_gtm_applicable: false,
            visitorId: 'visitorId',
            common_variables: {
                language: 'en',
                theme: 'dark',
                platform: 'DBot',
                loggedIn: false,
            },
            pushDataLayer: jest.fn(),
            pushTransactionData: jest.fn(),
            eventHandler: jest.fn(),
            setLoginFlag: jest.fn(),
        },
        contract_replay: {
            contract_store: {
                accumulator_previous_spot_time: null,
                barriers_array: [],
                contract_config: {},
                contract_info: {},
                contract_update: {},
                contract_update_history: [],
                digits_info: {},
                display_status: '',
                getContractsArray: jest.fn(),
                is_digit_contract: false,
                is_ended: false,
                marker: {
                    contract_info: {},
                    epoch_array: [],
                    key: '',
                    price_array: [],
                    type: '',
                },
                markers_array: [],
            },
            chart_state: '',
            chartStateChange: jest.fn(),
            has_error: false,
            is_chart_loading: true,
            is_market_closed: false,
            is_sell_requested: false,
            onClickCancel: jest.fn(),
            onClickSell: jest.fn(),
            onMount: jest.fn(),
            onUnmount: jest.fn(),
            removeErrorMessage: jest.fn(),
        },
        chart_barrier_store: {} as TCoreStores['chart_barrier_store'],
        active_symbols: {
            active_symbols: [],
            setActiveSymbols: jest.fn(),
        },
    };
};

const mockStore = (override: DeepPartial<TStores>): TStores => merge(mock(), override);

export default mockStore;
